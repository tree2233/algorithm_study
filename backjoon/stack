#include <iostream>

using namespace std;

typedef struct _node{
    struct _node* nextNode;
    int data;
}node;

typedef struct _stack{
    node* top;
    int cur;
}stack;

void init(stack*s);
void push(stack*s, int num);
int pop(stack*s);
bool isEmpty(stack*s);
int top(stack*s);
int size(stack*s);

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    
    int N, op, num;
    stack s;
    
    init(&s);
    cin >> N;

    while(N--) {
        cin >> op;
        switch(op) {
        case 1:
            cin >> num;
            push(&s, num);
            break;
        case 2:
            cout << pop(&s) << '\n';
            break;
        case 3:
            cout << size(&s) << '\n';
            break;
        case 4:
            cout << isEmpty(&s) << '\n';
            break;
        case 5:
            cout << top(&s) << '\n';
            break;
        }        
    }
    
    return 0;
}

void init(stack* s) {
    s->top = NULL;
    s->cur = 0;
}

bool isEmpty(stack* s) {
    return s->cur == 0;
}

void push(stack* s, int data) {
    node* temp = new node;
    temp->data = data;
    temp->nextNode = s->top;
    
    s->top = temp;
    s->cur++;
}

int pop(stack* s) {
    if(isEmpty(s))
        return -1;
    
    node* temp = s->top;
    int data = temp->data;
    
    s->top = temp->nextNode;
    s->cur--;
    return data;
}

int size(stack* s) {
    return s->cur;
}

int top(stack* s) {
    if(isEmpty(s))
        return -1;
        
    return s->top->data;
}
