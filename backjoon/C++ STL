1. vector
vector<int> v; //선언
.begin(), .end() //시작, 끝의 주소값 반환
.front(), .back() //시작, 끝의 값 반환
.size() //vector의 전체 크기 반환
.emplace_back(num) //벡터에 값 삽입
.push_back(num) //벡터에 값 삽입

-------------------------------------------------------------------------------------------------------------------------------------------------------

2. pair
pair<int, int> p; //선언
make_pair(num1, num2) //pair 생성

-------------------------------------------------------------------------------------------------------------------------------------------------------

3. map
map<string, int> m; //선언, 기본 오름차순 정렬
.insert(pair<string, int>(str, num)) //삽입, make_pair(str, num)으로도 가능
.find(key) //값의 위치 반환, 없으면 .end()값 반환

-------------------------------------------------------------------------------------------------------------------------------------------------------

4. stack
stack<int> s; //선언
.push(num)
.pop() //반환값 없음, front에 있는 값 제거
.front() //front값 출력

-------------------------------------------------------------------------------------------------------------------------------------------------------

5. queue
queue<int> s; //선언
.push(num)
.pop() //반환값 없음, front에 있는 값 제거
.front() //front값 출력(큐의 경우 FILO이니 out되는 값)

-------------------------------------------------------------------------------------------------------------------------------------------------------

5. deque
deque<int> d; //선언
.push_back()
.push_front()
.pop_back() //반환값 없음, 값 제거
.pop_front()
.back()
.front()

-------------------------------------------------------------------------------------------------------------------------------------------------------

6. string
string str //선언
.substr(n, k) //n번 index부터 k개의 문자로 부분 문자열 반환
.compare(str2) //비교, 같으면 0 다르면 음, 양 반환

-------------------------------------------------------------------------------------------------------------------------------------------------------

7. priority_queue //heap자료구조(tree자료구조 + 우선순위 정렬 log(N))로 구성된 queue
priority_queue<int> pq //선언
priority_queue<int, vector<int>, greater<int>> pq //자료형, container, compare_function을 포함한 선언
// compare_function은 구조체를 전달해줘야 한다. struct cmp { bool operator() (int a, int b) { return a > b }}; 형식으로 선언후, cmp전달로 임의의
// 비교함수를 전달할 수 있다.
.push(num) //삽입
.top() //최상단값 출력
.pop() //반환값 없음 최상단 값 제거

